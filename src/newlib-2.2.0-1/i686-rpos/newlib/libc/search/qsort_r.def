@node qsort_r
@section @code{qsort_r}---sort an array
@findex qsort_r
@strong{Synopsis}
@example
#define _BSD_SOURCE
#include <stdlib.h>
void qsort_r(void *@var{base}, size_t @var{nmemb}, size_t @var{size},
    void *@var{thunk},
    int (*@var{compar})(void*, const void *, const void *));

#define _GNU_SOURCE
#include <stdlib.h>
void qsort_r(void *@var{base}, size_t @var{nmemb}, size_t @var{size},
    int (*@var{compar})(const void *, const void *, void *),
    void *@var{thunk});

@end example
@strong{Description}@*
@code{qsort_r} sorts an array (beginning at @var{base}) of @var{nmemb} objects.
@var{size} describes the size of each element of the array.

You must supply a pointer to a comparison function, using the argument
shown as @var{compar}.  (This permits sorting objects of unknown
properties.)  There are two forms of this function, in each the
comparison function is defined to accept three arguments, but in a
different order.  Two are pointers to an element of the array starting at
@var{base}, and another being an arbitrary pointer @var{thunk}.  The
result of @code{(*@var{compar})} must be negative if the first argument is
less than the second, zero if the two arguments match, and positive if
the first argument is greater than the second (where ``less than'' and
``greater than'' refer to whatever arbitrary ordering is appropriate).

The array is sorted in place; that is, when @code{qsort_r} returns, the
array elements beginning at @var{base} have been reordered.

@*
@strong{Returns}@*
@code{qsort_r} does not return a result.

@*
@strong{Portability}@*
@code{qsort_r}, in various forms, appears in both BSD and glibc.

@*
