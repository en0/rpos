@node clearerr
@section @code{clearerr}, @code{clearerr_unlocked}---clear file or stream error indicator
@findex clearerr
@findex clearerr_unlocked
@strong{Synopsis}
@example
#include <stdio.h>
void clearerr(FILE *@var{fp});

#define _BSD_SOURCE
#include <stdio.h>
void clearerr_unlocked(FILE *@var{fp});

@end example
@strong{Description}@*
The @code{stdio} functions maintain an error indicator with each file
pointer @var{fp}, to record whether any read or write errors have
occurred on the associated file or stream.  Similarly, it maintains an
end-of-file indicator to record whether there is no more data in the
file.

Use @code{clearerr} to reset both of these indicators.

See @code{ferror} and @code{feof} to query the two indicators.

@code{clearerr_unlocked} is a non-thread-safe version of @code{clearerr}.
@code{clearerr_unlocked} may only safely be used within a scope
protected by flockfile() (or ftrylockfile()) and funlockfile().  This
function may safely be used in a multi-threaded program if and only
if they are called while the invoking thread owns the (FILE *)
object, as is the case after a successful call to the flockfile() or
ftrylockfile() functions.  If threads are disabled, then
@code{clearerr_unlocked} is equivalent to @code{clearerr}.

@*
@strong{Returns}@*
@code{clearerr} does not return a result.

@*
@strong{Portability}@*
ANSI C requires @code{clearerr}.

@code{clearerr_unlocked} is a BSD extension also provided by GNU libc.

No supporting OS subroutines are required.

@*
