@node getwchar
@section @code{getwchar}, @code{getwchar_unlocked}---read a wide character from standard input
@findex getwchar
@findex getwchar_unlocked
@findex _getwchar_r
@findex _getwchar_unlocked_r
@strong{Synopsis}
@example
#include <wchar.h>
wint_t getwchar(void);

#define _GNU_SOURCE
#include <wchar.h>
wint_t getwchar_unlocked(void);

#include <wchar.h>
wint_t _getwchar_r(struct _reent *@var{reent});

#include <wchar.h>
wint_t _getwchar_unlocked_r(struct _reent *@var{reent});

@end example
@strong{Description}@*
@code{getwchar} function or macro is the wide character equivalent of
the @code{getchar} function.  You can use @code{getwchar} to get the next
wide character from the standard input stream.  As a side effect,
@code{getwchar} advances the standard input's current position indicator.

@code{getwchar_unlocked} is a non-thread-safe version of @code{getwchar}.
@code{getwchar_unlocked} may only safely be used within a scope
protected by flockfile() (or ftrylockfile()) and funlockfile().  This
function may safely be used in a multi-threaded program if and only
if they are called while the invoking thread owns the (FILE *)
object, as is the case after a successful call to the flockfile() or
ftrylockfile() functions.  If threads are disabled, then
@code{getwchar_unlocked} is equivalent to @code{getwchar}.

The alternate functions @code{_getwchar_r} and @code{_getwchar_unlocked_r} are
reentrant versions of the above.  The extra argument @var{reent} is a pointer to
a reentrancy structure.

@*
@strong{Returns}@*
The next wide character cast to @code{wint_t}, unless there is no more
data, or the host system reports a read error; in either of these
situations, @code{getwchar} returns @code{WEOF}.

You can distinguish the two situations that cause an @code{WEOF} result by
using `@code{ferror(stdin)}' and `@code{feof(stdin)}'.

@*
@strong{Portability}@*
@code{getwchar} is required by C99.

@code{getwchar_unlocked} is a GNU extension.

@*
