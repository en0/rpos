@node fwrite
@section @code{fwrite}, @code{fwrite_unlocked}---write array elements
@findex fwrite
@findex fwrite_unlocked
@findex _fwrite_r
@findex _fwrite_unlocked_r
@strong{Synopsis}
@example
#include <stdio.h>
size_t fwrite(const void *restrict @var{buf}, size_t @var{size},
    size_t @var{count}, FILE *restrict @var{fp});

#define _BSD_SOURCE
#include <stdio.h>
size_t fwrite_unlocked(const void *restrict @var{buf}, size_t @var{size},
    size_t @var{count}, FILE *restrict @var{fp});

#include <stdio.h>
size_t _fwrite_r(struct _reent *@var{ptr}, const void *restrict @var{buf}, size_t @var{size},
    size_t @var{count}, FILE *restrict @var{fp});

#include <stdio.h>
size_t _fwrite_unlocked_r(struct _reent *@var{ptr}, const void *restrict @var{buf}, size_t @var{size},
    size_t @var{count}, FILE *restrict @var{fp});

@end example
@strong{Description}@*
@code{fwrite} attempts to copy, starting from the memory location
@var{buf}, @var{count} elements (each of size @var{size}) into the file or
stream identified by @var{fp}.  @code{fwrite} may copy fewer elements than
@var{count} if an error intervenes.

@code{fwrite} also advances the file position indicator (if any) for
@var{fp} by the number of @emph{characters} actually written.

@code{fwrite_unlocked} is a non-thread-safe version of @code{fwrite}.
@code{fwrite_unlocked} may only safely be used within a scope
protected by flockfile() (or ftrylockfile()) and funlockfile().  This
function may safely be used in a multi-threaded program if and only
if they are called while the invoking thread owns the (FILE *)
object, as is the case after a successful call to the flockfile() or
ftrylockfile() functions.  If threads are disabled, then
@code{fwrite_unlocked} is equivalent to @code{fwrite}.

@code{_fwrite_r} and @code{_fwrite_unlocked_r} are simply reentrant versions of the
above that take an additional reentrant structure argument: @var{ptr}.

@*
@strong{Returns}@*
If @code{fwrite} succeeds in writing all the elements you specify, the
result is the same as the argument @var{count}.  In any event, the
result is the number of complete elements that @code{fwrite} copied to
the file.

@*
@strong{Portability}@*
ANSI C requires @code{fwrite}.

@code{fwrite_unlocked} is a BSD extension also provided by GNU libc.

Supporting OS subroutines required: @code{close}, @code{fstat}, @code{isatty},
@code{lseek}, @code{read}, @code{sbrk}, @code{write}.

@*
